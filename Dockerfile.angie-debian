
# code: language=Dockerfile

# The code for the build image should be identical with the code in
# Dockerfile.django-debian to use the caching mechanism of Docker.

# Ref: https://devguide.python.org/#branchstatus
FROM python:3.11.4-slim-bullseye@sha256:40319d0a897896e746edf877783ef39685d44e90e1e6de8d964d0382df0d4952 as base
FROM base as build
WORKDIR /app
RUN \
  apt-get -y update && \
  apt-get -y install --no-install-recommends \
    gcc \
    build-essential \
    dnsutils \
    default-mysql-client \
    libmariadb-dev-compat \
    libpq-dev \
    postgresql-client \
    xmlsec1 \
    git \
    uuid-runtime \
    # libcurl4-openssl-dev is required for installing pycurl python package
    libcurl4-openssl-dev \
    && \
  apt-get clean && \
  rm -rf /var/lib/apt/lists && \
  true
COPY requirements.txt ./
# CPUCOUNT=1 is needed, otherwise the wheel for uwsgi won't always be build succesfully
# https://github.com/unbit/uwsgi/issues/1318#issuecomment-542238096
RUN CPUCOUNT=1 pip3 wheel --wheel-dir=/tmp/wheels -r ./requirements.txt


FROM build AS collectstatic

USER root
ENV \
  # This will point yarn to whatever version of node you decide to use
  # due to the use of nodejs instead of node name in some distros
  node="nodejs"
RUN \
  apt-get -y update && \
  apt-get -y install --no-install-recommends apt-transport-https ca-certificates curl wget gnupg && \
  curl -sSL https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add --no-tty - && \
  echo 'deb https://deb.nodesource.com/node_20.x bullseye main' > /etc/apt/sources.list.d/nodesource.list && \
  echo 'deb-src https://deb.nodesource.com/node_20.x bullseye main' >> /etc/apt/sources.list.d/nodesource.list && \
  apt-get update -y -o Dir::Etc::sourcelist="sources.list.d/nodesource.list" \
  -o Dir::Etc::sourceparts="-" -o APT::Get::List-Cleanup="0" && \
  curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - && \
  wget https://github.com/yarnpkg/yarn/releases/download/v1.22.10/yarn_1.22.10_all.deb && \
  dpkg -i yarn_1.22.10_all.deb && \
  echo "$(yarn --version)" && \
  apt-get -y install --no-install-recommends nodejs && \
  echo "$(node --version)" && \
  apt-get clean && \
  rm yarn_1.22.10_all.deb && \
  rm -rf /var/lib/apt/lists && \
  true

RUN pip3 install \
	--no-cache-dir \
	--no-index \
  --find-links=/tmp/wheels \
	-r ./requirements.txt

COPY components/ ./components/
RUN \
  cd components && \
  yarn

COPY manage.py ./
COPY dojo/ ./dojo/

RUN env DD_SECRET_KEY='.' python3 manage.py collectstatic --noinput && true



LABEL org.opencontainers.image.authors="Release Engineering Team <margincode@gmail.com>"



RUN set -x \
     && apt-get update \
     && apt-get install --no-install-recommends --no-install-suggests -y \
          ca-certificates curl \
     && curl -o /etc/apt/trusted.gpg.d/angie-signing.gpg \
          https://angie.software/keys/angie-signing.gpg \
     && echo "deb https://download.angie.software/angie/$(. /etc/os-release && echo "$ID/$VERSION_ID $VERSION_CODENAME") main" \
          > /etc/apt/sources.list.d/angie.list \
     && apt-get update \
     && apt-get install --no-install-recommends --no-install-suggests -y \
          angie angie-module-geoip2 angie-module-njs \
     && rm -Rf /var/lib/apt/lists \
          /etc/apt/sources.list.d/angie.list \
          /etc/apt/trusted.gpg.d/angie-signing.gpg \
     && ln -sf /dev/stdout /var/log/angie/access.log \
     && ln -sf /dev/stderr /var/log/angie/error.log

ARG uid=1001
ARG appuser=defectdojo
COPY --from=collectstatic /app/static/ /usr/share/angie/html/static/
COPY wsgi_params angie/angie.conf angie/angie_TLS.conf /etc/angie/


COPY docker/entrypoint-angie.sh /
RUN \
  apk add --no-cache openssl && \
  chmod -R g=u /var/cache/angie && \
  mkdir /var/run/defectdojo && \
  chmod -R g=u /var/run/defectdojo && \
  mkdir -p /etc/angie/ssl && \
  chmod -R g=u /etc/angie && \
  true
ENV \
  DD_UWSGI_PASS="uwsgi_server" \
  DD_UWSGI_HOST="uwsgi" \
  DD_UWSGI_PORT="3031" \
  GENERATE_TLS_CERTIFICATE="false" \
  USE_TLS="false" \
  NGINX_METRICS_ENABLED="false" \
  METRICS_HTTP_AUTH_USER="" \
  METRICS_HTTP_AUTH_PASSWORD=""

USER ${uid}
EXPOSE 8080
ENTRYPOINT ["/entrypoint-angie.sh"]