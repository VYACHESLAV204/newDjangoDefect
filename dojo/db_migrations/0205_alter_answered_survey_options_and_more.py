# Generated by Django 4.1.13 on 2024-05-26 15:59

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import dojo.models
import multiselectfield.db.fields
import tagulous.models.fields


class Migration(migrations.Migration):

    dependencies = [
        ('dojo', '0204_alter_finding_cvssv3_score'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='answered_survey',
            options={'verbose_name': 'Опросы о проверке, у которые есть ответ', 'verbose_name_plural': 'Опросы о проверке, у которых есть ответ'},
        ),
        migrations.AlterModelOptions(
            name='engagement_survey',
            options={'ordering': ('-active', 'name'), 'verbose_name': 'Опрос о проверке', 'verbose_name_plural': 'Engagement Surveys'},
        ),
        migrations.AlterModelOptions(
            name='general_survey',
            options={'verbose_name': 'Общий опрос по проверке', 'verbose_name_plural': 'Общие опросы по проверке'},
        ),
        migrations.AlterField(
            model_name='announcement',
            name='dismissable',
            field=models.BooleanField(blank=True, default=False, help_text='Позволяет пользователям закрыть текущее объявление, чтобы оно больше не отображалось', verbose_name='Можно скрыть?'),
        ),
        migrations.AlterField(
            model_name='announcement',
            name='message',
            field=models.CharField(default='', help_text="Это скрываемое сообщение будет отображено на всех страницах для авторизованных пользователей. Оно может содержать базовые html теги, к примеру <a href='https://www.fred.com' style='color: #337ab7;' target='_blank'>https://example.com</a>", max_length=500),
        ),
        migrations.AlterField(
            model_name='announcement',
            name='style',
            field=models.CharField(choices=[('info', 'Info'), ('success', 'Success'), ('warning', 'Warning'), ('danger', 'Danger')], default='info', help_text='Отображаемый стиль баннера. (синий, зеленый, желтый, красный)', max_length=64),
        ),
        migrations.AlterField(
            model_name='app_analysis',
            name='confidence',
            field=models.IntegerField(blank=True, null=True, verbose_name='Уровень доверия'),
        ),
        migrations.AlterField(
            model_name='app_analysis',
            name='version',
            field=models.CharField(blank=True, max_length=200, null=True, verbose_name='Номер версии'),
        ),
        migrations.AlterField(
            model_name='bannerconf',
            name='banner_message',
            field=models.CharField(default='', help_text="Это сообщение будет отображено на странице входа. Оно может содержать базовые html теги, к примеру <a href='https://www.fred.com' style='color: #337ab7;' target='_blank'>https://example.com</a>", max_length=500),
        ),
        migrations.AlterField(
            model_name='benchmark_category',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dojo.benchmark_type', verbose_name='Тип бенчмарка'),
        ),
        migrations.AlterField(
            model_name='benchmark_product',
            name='enabled',
            field=models.BooleanField(default=True, help_text='Применимо для этого конкретного продукта.'),
        ),
        migrations.AlterField(
            model_name='benchmark_product',
            name='pass_fail',
            field=models.BooleanField(default=False, help_text='Соответствует ли продукт требованию?', verbose_name='Проверено'),
        ),
        migrations.AlterField(
            model_name='benchmark_product_summary',
            name='asvs_level_1_benchmark',
            field=models.IntegerField(default=0, help_text='Общее количество активных бенчмарков для этого приложения.'),
        ),
        migrations.AlterField(
            model_name='benchmark_product_summary',
            name='asvs_level_1_score',
            field=models.IntegerField(default=0, help_text='Оценка уровня 1 ASVS'),
        ),
        migrations.AlterField(
            model_name='benchmark_product_summary',
            name='asvs_level_2_benchmark',
            field=models.IntegerField(default=0, help_text='Общее количество активных бенчмарков для этого приложения.'),
        ),
        migrations.AlterField(
            model_name='benchmark_product_summary',
            name='asvs_level_2_score',
            field=models.IntegerField(default=0, help_text='Оценка уровня 2 ASVS'),
        ),
        migrations.AlterField(
            model_name='benchmark_product_summary',
            name='asvs_level_3_benchmark',
            field=models.IntegerField(default=0, help_text='Общее количество активных бенчмарков для этого приложения.'),
        ),
        migrations.AlterField(
            model_name='benchmark_product_summary',
            name='asvs_level_3_score',
            field=models.IntegerField(default=0, help_text='Оценка уровня 3 ASVS'),
        ),
        migrations.AlterField(
            model_name='benchmark_product_summary',
            name='publish',
            field=models.BooleanField(default=False, help_text='Опубликовать балл в продукте.'),
        ),
        migrations.AlterField(
            model_name='choiceanswer',
            name='answer',
            field=models.ManyToManyField(help_text='Выбранный вариант ответа', to='dojo.choice'),
        ),
        migrations.AlterField(
            model_name='choicequestion',
            name='multichoice',
            field=models.BooleanField(default=False, help_text='Выберите не менее одного'),
        ),
        migrations.AlterField(
            model_name='cred_mapping',
            name='cred_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cred_user', to='dojo.cred_user', verbose_name='Учётные данные'),
        ),
        migrations.AlterField(
            model_name='cred_mapping',
            name='is_authn_provider',
            field=models.BooleanField(default=False, verbose_name='Провайдер аутентификации'),
        ),
        migrations.AlterField(
            model_name='cred_user',
            name='is_valid',
            field=models.BooleanField(default=True, verbose_name='Учетка активная'),
        ),
        migrations.AlterField(
            model_name='dojo_group_member',
            name='role',
            field=models.ForeignKey(help_text='Эта роль определяет права пользователя на управление группой.', on_delete=django.db.models.deletion.CASCADE, to='dojo.role', verbose_name='Роль в группе'),
        ),
        migrations.AlterField(
            model_name='endpoint',
            name='findings',
            field=models.ManyToManyField(blank=True, through='dojo.Endpoint_Status', to='dojo.finding', verbose_name='Уязвимости'),
        ),
        migrations.AlterField(
            model_name='endpoint',
            name='fragment',
            field=models.CharField(blank=True, help_text='Идентификатор фрагмента, который следует за хэш-меткой. Хэш-метку следует пропускать. Например «section-13», «paragraph -2».', max_length=500, null=True),
        ),
        migrations.AlterField(
            model_name='endpoint',
            name='host',
            field=models.CharField(blank=True, help_text="Имя хоста или IP-адрес. Не должно содержаться номера порта. Например, '127.0.0.1', 'localhost', 'yourdomain.com'.", max_length=500, null=True),
        ),
        migrations.AlterField(
            model_name='endpoint',
            name='inherited_tags',
            field=tagulous.models.fields.TagField(_set_tag_meta=True, blank=True, force_lowercase=True, help_text='Внутреннее использование специфичных тегов для поддержания паритетности продукта. Это поле будет присутствовать как подмножество в поле тегов', to='dojo.tagulous_endpoint_inherited_tags'),
        ),
        migrations.AlterField(
            model_name='endpoint',
            name='path',
            field=models.CharField(blank=True, help_text="Расположение ресурса не должно начинаться с '/'. Например endpoint/420/edit", max_length=500, null=True),
        ),
        migrations.AlterField(
            model_name='endpoint',
            name='port',
            field=models.IntegerField(blank=True, help_text='Сетевой порт, связанный с конечной точкой.', null=True),
        ),
        migrations.AlterField(
            model_name='endpoint',
            name='protocol',
            field=models.CharField(blank=True, help_text="Коммуникационный протокол/схема типа 'http', 'ftp', 'dns' и т.д.", max_length=20, null=True),
        ),
        migrations.AlterField(
            model_name='endpoint',
            name='query',
            field=models.CharField(blank=True, help_text="Строка запроса, знак вопроса должен быть опущен. Например, 'group=4&team=8'", max_length=1000, null=True),
        ),
        migrations.AlterField(
            model_name='endpoint',
            name='tags',
            field=tagulous.models.fields.TagField(_set_tag_meta=True, blank=True, force_lowercase=True, help_text='Добавьте теги, которые помогут описать эту конечную точку. Выберите из списка или добавьте новые теги. Нажмите клавишу Enter для добавления.', to='dojo.tagulous_endpoint_tags'),
        ),
        migrations.AlterField(
            model_name='endpoint',
            name='userinfo',
            field=models.CharField(blank=True, help_text="Информация о пользователе как 'alice', 'bob' и т.д.", max_length=500, null=True),
        ),
        migrations.AlterField(
            model_name='engagement',
            name='branch_tag',
            field=models.CharField(blank=True, help_text='Тег или ветка протестированного продукта.', max_length=150, null=True, verbose_name='Ветка/Тег'),
        ),
        migrations.AlterField(
            model_name='engagement',
            name='build_id',
            field=models.CharField(blank=True, help_text='ID сборки проверки в протестированном продукте.', max_length=150, null=True, verbose_name='ID сборки'),
        ),
        migrations.AlterField(
            model_name='engagement',
            name='build_server',
            field=models.ForeignKey(blank=True, help_text='Сервер сборки, ответственный за CI/CD тест', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='build_server', to='dojo.tool_configuration', verbose_name='Сервер сборки'),
        ),
        migrations.AlterField(
            model_name='engagement',
            name='commit_hash',
            field=models.CharField(blank=True, help_text='Хэш коммита из репозитория', max_length=150, null=True, verbose_name='Хэш коммита'),
        ),
        migrations.AlterField(
            model_name='engagement',
            name='deduplication_on_engagement',
            field=models.BooleanField(default=False, help_text='Если включено deduplication будет означать только вывод в этой проверке как дубликат другого вывода, если оба выводы находятся в этой проверке. Если отключено, происходит дедупликация на уровне продукта.', verbose_name='Дедупликация только в рамках этой проверки'),
        ),
        migrations.AlterField(
            model_name='engagement',
            name='inherited_tags',
            field=tagulous.models.fields.TagField(_set_tag_meta=True, blank=True, force_lowercase=True, help_text='Внутреннее использование специфичных тегов для поддержания паритетности продукта. Это поле будет присутствовать как подмножество в поле тегов', to='dojo.tagulous_engagement_inherited_tags'),
        ),
        migrations.AlterField(
            model_name='engagement',
            name='orchestration_engine',
            field=models.ForeignKey(blank=True, help_text='Сервис оркестрации, отвечающий за проведение CI/CD тестов', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='orchestration', to='dojo.tool_configuration', verbose_name='Механизм оркестровки'),
        ),
        migrations.AlterField(
            model_name='engagement',
            name='preset',
            field=models.ForeignKey(blank=True, help_text='Настройки и заметки, необходимые для проведения этой проверки.', null=True, on_delete=django.db.models.deletion.CASCADE, to='dojo.engagement_presets'),
        ),
        migrations.AlterField(
            model_name='engagement',
            name='source_code_management_server',
            field=models.ForeignKey(blank=True, help_text='Сервер исходного кода для CI/CD теста', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='source_code_management_server', to='dojo.tool_configuration', verbose_name='SCM сервер'),
        ),
        migrations.AlterField(
            model_name='engagement',
            name='source_code_management_uri',
            field=models.URLField(blank=True, help_text='Ссылка на ресурс с исходным кодом', max_length=600, null=True, verbose_name='Репозиторий'),
        ),
        migrations.AlterField(
            model_name='engagement',
            name='tags',
            field=tagulous.models.fields.TagField(_set_tag_meta=True, blank=True, force_lowercase=True, help_text='Добавьте теги, которые помогут описать эту проверку. Выберите из списка или добавьте новые теги. Нажмите клавишу Enter для добавления.', to='dojo.tagulous_engagement_tags'),
        ),
        migrations.AlterField(
            model_name='engagement',
            name='tracker',
            field=models.URLField(blank=True, help_text='Ссылка на эпиков или задачу с изменениями версии.', null=True),
        ),
        migrations.AlterField(
            model_name='engagement',
            name='version',
            field=models.CharField(blank=True, help_text='Версия продукта тестируемой проверки.', max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='engagement_presets',
            name='notes',
            field=models.CharField(blank=True, help_text='Описание того, что необходимо протестировать или как настроить среду для тестирования', max_length=2000, null=True),
        ),
        migrations.AlterField(
            model_name='engagement_presets',
            name='scope',
            field=models.CharField(blank=True, default=None, help_text='Скоуп тестирования Проверки (IP/Ресуры/URL)', max_length=800),
        ),
        migrations.AlterField(
            model_name='engagement_presets',
            name='title',
            field=models.CharField(default=None, help_text='Краткое описание пресета.', max_length=500),
        ),
        migrations.AlterField(
            model_name='finding',
            name='active',
            field=models.BooleanField(default=True, help_text='Обозначает если этот недостаток активен или нет.', verbose_name='Активно'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='component_name',
            field=models.CharField(blank=True, help_text='Название затрагиваемого компонента (название библиотеки, часть системы, ...).', max_length=500, null=True, verbose_name='Название компонента'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='component_version',
            field=models.CharField(blank=True, help_text='Версия затрагиваемого компонента.', max_length=100, null=True, verbose_name='Версия компонента'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='created',
            field=models.DateTimeField(auto_now_add=True, help_text='Дата находки была создана внутри DefectDojo.', null=True, verbose_name='Создано'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='cve',
            field=models.CharField(help_text='Идентификатор уязвимости в советах по безопасности, ассоциированный с этой находкой. Может быть Common Vulnerabilities and Exposures (CVE) или из других источников.', max_length=50, null=True, verbose_name='Идентификатор уязвимости'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='cvssv3',
            field=models.TextField(help_text='CVSSv3, связанный с этим недостатком.', max_length=117, null=True, validators=[django.core.validators.RegexValidator(message="CVSS must be entered in format: 'AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H'", regex='^AV:[NALP]|AC:[LH]|PR:[UNLH]|UI:[NR]|S:[UC]|[CIA]:[NLH]')], verbose_name='CVSS v3'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='cvssv3_score',
            field=models.FloatField(blank=True, help_text='Numerical CVSSv3 score for the vulnerability. If the vector is given, the score is updated while saving the finding. The value must be between 0-10.', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(10.0)], verbose_name='Оценка CVSSv3'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='cwe',
            field=models.IntegerField(blank=True, default=0, help_text='Номер CWE, связанный с этим недостатком.', null=True, verbose_name='CWE'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='date',
            field=models.DateField(default=dojo.models.get_current_date, help_text='Дата обнаружения недостатка.', verbose_name='Дата'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='defect_review_requested_by',
            field=models.ForeignKey(blank=True, help_text='Документы, запросившие проверку дефектов для этого недостатка.', null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='defect_review_requested_by', to='dojo.dojo_user', verbose_name='Проверка дефектов запрошена'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='description',
            field=models.TextField(help_text='Более подробная информация о недостатке.', verbose_name='Описание'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='duplicate',
            field=models.BooleanField(default=False, help_text='Сообщает, что если этот недостаток дублирует другие недостатки.', verbose_name='Дубликат'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='duplicate_finding',
            field=models.ForeignKey(blank=True, editable=False, help_text='Ссылка на оригинальную уязвимость, если эта является дубликатом.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='original_finding', to='dojo.finding', verbose_name='Дублированные уязвимости'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='dynamic_finding',
            field=models.BooleanField(default=True, help_text='Недостаток был обнаружен Динамическим Анализатором Кода (DAST).', verbose_name='Динамический анализ (DAST)'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='effort_for_fixing',
            field=models.CharField(blank=True, help_text='Сложность исправления уязвимости (Низкий, Средний, Высокий)', max_length=99, null=True, verbose_name='Сложность исправления'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='endpoints',
            field=models.ManyToManyField(blank=True, help_text='Принимающие стороны продукта, которые подвержены этому недостатку. + Статус конечной точки, связанной с этим недостатком (Уязвима, Решена, ...).', through='dojo.Endpoint_Status', to='dojo.endpoint', verbose_name='Конечные точки'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='false_p',
            field=models.BooleanField(default=False, help_text='Обозначает если этот недостаток был признан тестером False positive.', verbose_name='False Positive'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='file_path',
            field=models.CharField(blank=True, help_text='Идентификационный файл(ы), содержащий недостаток.', max_length=4000, null=True, verbose_name='Путь к файлу'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='files',
            field=models.ManyToManyField(blank=True, editable=False, help_text='Файлы(ы), связанные с недостатком.', to='dojo.fileupload', verbose_name='Файлы'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='found_by',
            field=models.ManyToManyField(editable=False, help_text='Название сканера, который идентифицировал недостаток.', to='dojo.test_type', verbose_name='Найден'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='hash_code',
            field=models.CharField(blank=True, editable=False, help_text='Хэш значений настраиваемых полей, используемых для дедупликации находок.', max_length=64, null=True, verbose_name='Хэш код'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='impact',
            field=models.TextField(blank=True, help_text='Текст, описывающий влияние этой ошибки на системы, продукты, предприятия и т.д.', null=True, verbose_name='Impact'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='inherited_tags',
            field=tagulous.models.fields.TagField(_set_tag_meta=True, blank=True, force_lowercase=True, help_text='Внутреннее использование специфичных тегов для поддержания паритетности продукта. Это поле будет присутствовать как подмножество в поле тегов', to='dojo.tagulous_finding_inherited_tags'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='is_mitigated',
            field=models.BooleanField(default=False, help_text='Определяет, что этот недостаток был исправлен.', verbose_name='Исправлено'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='last_reviewed',
            field=models.DateTimeField(editable=False, help_text='Определяет дату, когда недостаток был последний раз "тронут" тестером.', null=True, verbose_name='Последняя проверка'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='last_reviewed_by',
            field=models.ForeignKey(editable=False, help_text='Кто последний раз производил проверку недостатка.', null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='last_reviewed_by', to='dojo.dojo_user', verbose_name='Последняя проверка'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='last_status_update',
            field=models.DateTimeField(auto_now_add=True, help_text='Отметка времени последнего обновления статуса (изменение полей статуса).', null=True, verbose_name='Последнее обновление статуса'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='line',
            field=models.IntegerField(blank=True, help_text='Номер исходной строки вектора атаки.', null=True, verbose_name='Номер строки'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='mitigated',
            field=models.DateTimeField(blank=True, editable=False, help_text='Определяет, был ли этот недостаток исправлен, сохраняя дату исправления этой проблемы.', null=True, verbose_name='Mitigated'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='mitigated_by',
            field=models.ForeignKey(editable=False, help_text='Документы, которые отметили этот недостаток как исправленный.', null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='mitigated_by', to='dojo.dojo_user', verbose_name='Mitigated By'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='mitigation',
            field=models.TextField(blank=True, help_text='Текст, описывающий способ наилучшего исправления недостатка.', null=True, verbose_name='Исправление'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='nb_occurences',
            field=models.IntegerField(blank=True, help_text='Количество вхождений в исходный код при обнаружении и агрегировании нескольких уязвимостей сканером.', null=True, verbose_name='Количество вхождений'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='notes',
            field=models.ManyToManyField(blank=True, editable=False, help_text='Сохраняет информацию, относящуюся к недостатку или смягчению последствий.', to='dojo.notes', verbose_name='Заметки'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='numerical_severity',
            field=models.CharField(help_text='Числовое представление severity (S0, S1, S2, S3, S4).', max_length=4, verbose_name='Числовые оценки Severity'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='out_of_scope',
            field=models.BooleanField(default=False, help_text='Оповещает, если недостаток выходит за рамки теста и/или проверки.', verbose_name='Out Of Scope'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='param',
            field=models.TextField(blank=True, editable=False, help_text='Параметр для срабатывания проблемы (DAST).', null=True, verbose_name='Параметр'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='payload',
            field=models.TextField(blank=True, editable=False, help_text='Payload, используемый для атаки на сервис/приложение и вызывающий ошибку/проблему.', null=True, verbose_name='Payload'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='planned_remediation_date',
            field=models.DateField(help_text='Ожидаемая дата, когда недостаток будет устранен.', null=True, verbose_name='Плановая дата пересмотра'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='planned_remediation_version',
            field=models.CharField(blank=True, help_text='Целевая версия, когда уязвимость должна быть исправлена', max_length=99, null=True, verbose_name='Запланированная версия исправления'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='publish_date',
            field=models.DateField(blank=True, help_text='Дата, когда эта уязвимость стала общедоступна.', null=True, verbose_name='Дата публикации'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='references',
            field=models.TextField(blank=True, db_column='refs', help_text='Внешняя документация доступна для этого недостатка.', null=True, verbose_name='Ссылки'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='reporter',
            field=models.ForeignKey(default=1, editable=False, help_text='Документы, которые сообщили о недостатке.', on_delete=django.db.models.deletion.RESTRICT, related_name='reporter', to='dojo.dojo_user', verbose_name='Сообщил'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='review_requested_by',
            field=models.ForeignKey(blank=True, help_text='Документы, запросившие проверку для этой находки.', null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='review_requested_by', to='dojo.dojo_user', verbose_name='Проверка запрошена'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='reviewers',
            field=models.ManyToManyField(blank=True, help_text='Документы, в которых рассматривается о недостатке.', to='dojo.dojo_user', verbose_name='Рецензенты'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='risk_accepted',
            field=models.BooleanField(default=False, help_text='Определяет, что находка была помечена как принятый риск.', verbose_name='Риск принят'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='sast_sink_object',
            field=models.CharField(blank=True, help_text='Стоковый объект (переменная, функция...) вектора атаки.', max_length=500, null=True, verbose_name='Стоковый объект SAST'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='sast_source_file_path',
            field=models.CharField(blank=True, help_text='Путь к исходному файлу в векторе атаки.', max_length=4000, null=True, verbose_name='Путь к исходному файлу SAST'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='sast_source_line',
            field=models.IntegerField(blank=True, help_text='Номер исходной строки вектора атаки.', null=True, verbose_name='Номер строки исходника переданного в SAST'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='sast_source_object',
            field=models.CharField(blank=True, help_text='Исходный объект (переменная, функция...) вектора атаки.', max_length=500, null=True, verbose_name='Исходный объект SAST'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='scanner_confidence',
            field=models.IntegerField(blank=True, default=None, editable=False, help_text='Уровень критичности уязвимости был установлен сканером.', null=True, verbose_name='Точность сканирования'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='service',
            field=models.CharField(blank=True, help_text='Самодостаточный функционал в рамках Продукта. Это опциональное поле, которое используется для дедупликации находок, если указано.', max_length=200, null=True, verbose_name='Сервис'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='severity',
            field=models.CharField(help_text='Уровень тяжести этой дефекта (критический, высокий, средний, низкий, информативный).', max_length=200, verbose_name='Серьезность'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='severity_justification',
            field=models.TextField(blank=True, help_text='Текст с описанием того, почему определенная степень тяжести связана с этим недостатком.', null=True, verbose_name='Обоснование важности'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='sla_start_date',
            field=models.DateField(blank=True, help_text="(только для чтения) Дата, используемая в качестве даты начала для расчёта SLA. Устанавливается для принятия рисков. По умолчанию она пуста и возвращается к 'дате'.", null=True, verbose_name='Дата начала SLA'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='sonarqube_issue',
            field=models.ForeignKey(blank=True, help_text='Задача SonarQube была ассоциирована с этой находкой.', null=True, on_delete=django.db.models.deletion.CASCADE, to='dojo.sonarqube_issue', verbose_name='Задачи SonarQube'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='static_finding',
            field=models.BooleanField(default=False, help_text='Недостаток обнаружен Статическим Анализатором Кода (SAST).', verbose_name='Статический анализ (SAST)'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='steps_to_reproduce',
            field=models.TextField(blank=True, help_text='Текст описания шагов, которые должны выполняться для воспроизведения дефекта/ошибки.', null=True, verbose_name='Шаги для воспроизведения'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='tags',
            field=tagulous.models.fields.TagField(_set_tag_meta=True, blank=True, force_lowercase=True, help_text='Добавьте теги, которые помогут описать эту находку. Выберите из списка или добавьте новые теги. Нажмите клавишу Enter для добавления.', to='dojo.tagulous_finding_tags'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='test',
            field=models.ForeignKey(editable=False, help_text='Тест, связанный с этим недостатком.', on_delete=django.db.models.deletion.CASCADE, to='dojo.test', verbose_name='Проверка'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='title',
            field=models.CharField(help_text='Краткое описание недостатка.', max_length=511, verbose_name='Название'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='under_defect_review',
            field=models.BooleanField(default=False, help_text='Обозначает если эта находка находится на рассмотрении.', verbose_name='На рассмотрении'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='under_review',
            field=models.BooleanField(default=False, help_text='Определяет, что недостаток находится на рассмотрении.', verbose_name='На рассмотрении'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='unique_id_from_tool',
            field=models.CharField(blank=True, help_text='Технический идентификатор уязвимости инструмента. Применяется для отслеживания уникальных уязвимостей.', max_length=500, null=True, verbose_name='Уникальный идентификатор инструмента'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='url',
            field=models.TextField(blank=True, editable=False, help_text='Внешняя ссылка, содержащая более подробную информацию об этом недостатке.', null=True, verbose_name='Адрес URL'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='verified',
            field=models.BooleanField(default=False, help_text='Определяет, если этот недостаток был подтвержден тестером вручную.', verbose_name='Подтвержден'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='vuln_id_from_tool',
            field=models.CharField(blank=True, help_text='Не уникальные технические идентификаторы инструмента ассоциированные с типом уязвимости.', max_length=500, null=True, verbose_name='Идентификатор уязвимости инструмента'),
        ),
        migrations.AlterField(
            model_name='finding_template',
            name='tags',
            field=tagulous.models.fields.TagField(_set_tag_meta=True, blank=True, force_lowercase=True, help_text='Добавьте теги, которые помогут описать этот шаблон находки. Выберите из списка или добавьте новые теги. Нажмите клавишу Enter для добавления.', to='dojo.tagulous_finding_template_tags'),
        ),
        migrations.AlterField(
            model_name='finding_template',
            name='template_match',
            field=models.BooleanField(default=False, help_text='Включает этот шаблон для сопоставления рекомендаций по исправлению. Сопоставление будет применено ко всем активным и подтвержденным находкам по CWE.', verbose_name='Совпадение шаблона включено'),
        ),
        migrations.AlterField(
            model_name='finding_template',
            name='template_match_title',
            field=models.BooleanField(default=False, help_text='Сопоставление по тексту заголовка (содержит строку поиска) и CWE.', verbose_name='Сопоставление шаблона по заголовку и CWE'),
        ),
        migrations.AlterField(
            model_name='github_conf',
            name='api_key',
            field=models.CharField(default='', help_text='Введите ваш GitHub API ключ', max_length=2000),
        ),
        migrations.AlterField(
            model_name='github_conf',
            name='configuration_name',
            field=models.CharField(default='', help_text='Введите имя для этой конфигурации', max_length=2000),
        ),
        migrations.AlterField(
            model_name='github_issue',
            name='issue_url',
            field=models.URLField(max_length=2000, verbose_name='URL проблемы на GitHub'),
        ),
        migrations.AlterField(
            model_name='github_pkey',
            name='git_conf',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dojo.github_conf', verbose_name='Конфигурация Github'),
        ),
        migrations.AlterField(
            model_name='github_pkey',
            name='git_project',
            field=models.CharField(blank=True, help_text='Укажите местоположение проекта. (:user/:repo)', max_length=200, verbose_name='Проект на GitHub'),
        ),
        migrations.AlterField(
            model_name='github_pkey',
            name='git_push_notes',
            field=models.BooleanField(blank=True, default=False, help_text='Примечания, добавленные в результаты будут автоматически добавлены в соответствующую задачу github'),
        ),
        migrations.AlterField(
            model_name='global_role',
            name='role',
            field=models.ForeignKey(blank=True, help_text='Глобальная роль будет применяться ко всем проектам и типам проектов.', null=True, on_delete=django.db.models.deletion.CASCADE, to='dojo.role', verbose_name='Глобальная роль'),
        ),
        migrations.AlterField(
            model_name='jira_instance',
            name='accepted_mapping_resolution',
            field=models.CharField(blank=True, help_text='Названия решений в JIRA (значения, разделенные запятыми), которые сопоставляются с принятым риском', max_length=300, null=True),
        ),
        migrations.AlterField(
            model_name='jira_instance',
            name='close_status_key',
            field=models.IntegerField(help_text='Идентификатор перехода к закрытию задачи JIRA, посетите https://<YOUR JIRA URL>/rest/api/latest/issue/<ANY VALID ISSUE KEY>/transitions?expand=transitions.fields, чтобы найти идентификатор для вашего экземпляра JIRA', verbose_name='Идентификатор перехода к закрытию'),
        ),
        migrations.AlterField(
            model_name='jira_instance',
            name='configuration_name',
            field=models.CharField(default='', help_text='Введите имя для этой конфигурации', max_length=2000),
        ),
        migrations.AlterField(
            model_name='jira_instance',
            name='critical_mapping_severity',
            field=models.CharField(help_text='Соответствует полю "Priority" в Jira. Например: Critical', max_length=200),
        ),
        migrations.AlterField(
            model_name='jira_instance',
            name='default_issue_type',
            field=models.CharField(choices=[('Task', 'Task'), ('Story', 'Story'), ('Epic', 'Epic'), ('Spike', 'Spike'), ('Bug', 'Bug'), ('Security', 'Security')], default='Bug', help_text='Вы можете определить дополнительные типы задач в settings.py', max_length=255),
        ),
        migrations.AlterField(
            model_name='jira_instance',
            name='epic_name_id',
            field=models.IntegerField(help_text="Чтобы получить 'Идентификатор эпика', посетите https://<URL вашей JIRA>/rest/api/2/field и выполните поиск по имени эпика. Скопируйте номер из cf[число] и вставьте его здесь."),
        ),
        migrations.AlterField(
            model_name='jira_instance',
            name='false_positive_mapping_resolution',
            field=models.CharField(blank=True, help_text='Названия решений в JIRA (значения, разделенные запятыми), которые сопоставляются с False Positive находкой', max_length=300, null=True),
        ),
        migrations.AlterField(
            model_name='jira_instance',
            name='finding_jira_sync',
            field=models.BooleanField(default=False, help_text='Если включено, будет автоматически отправлять изменения находок в JIRA', verbose_name='Автоматически синхронизировать находки с JIRA?'),
        ),
        migrations.AlterField(
            model_name='jira_instance',
            name='finding_text',
            field=models.TextField(blank=True, help_text='Дополнительный текст, который будет добавлен в находку в Jira. Например, может включать в себя информацию о том, как находка была создана или к кому можно обратиться за дополнительной информацией.', null=True),
        ),
        migrations.AlterField(
            model_name='jira_instance',
            name='global_jira_sla_notification',
            field=models.BooleanField(default=True, help_text='Этот параметр может быть изменен на уровне продукта', verbose_name='Глобально отправлять SLA уведомления в качестве комментария?'),
        ),
        migrations.AlterField(
            model_name='jira_instance',
            name='high_mapping_severity',
            field=models.CharField(help_text='Соответствует полю "Priority" в Jira. Например: High', max_length=200),
        ),
        migrations.AlterField(
            model_name='jira_instance',
            name='info_mapping_severity',
            field=models.CharField(help_text='Соответствует полю "Priority" в Jira. Например: Info', max_length=200),
        ),
        migrations.AlterField(
            model_name='jira_instance',
            name='issue_template_dir',
            field=models.CharField(blank=True, help_text='Выберите папку, содержащую шаблоны Django, используемые для отображения описания задач в JIRA. Они хранятся в dojo/templates/issue-trackers. Оставьте пустым, чтобы использовать шаблоны по умолчанию.', max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='jira_instance',
            name='low_mapping_severity',
            field=models.CharField(help_text='Соответствует полю "Priority" в Jira. Например: Low', max_length=200),
        ),
        migrations.AlterField(
            model_name='jira_instance',
            name='medium_mapping_severity',
            field=models.CharField(help_text='Соответствует полю "Priority" в Jira. Например: Medium', max_length=200),
        ),
        migrations.AlterField(
            model_name='jira_instance',
            name='open_status_key',
            field=models.IntegerField(help_text='Идентификатор перехода к повторному открытию задачи JIRA, посетите https://<YOUR JIRA URL>/rest/api/latest/issue/<ANY VALID ISSUE KEY>/transitions?expand=transitions.fields, чтобы найти идентификатор для вашего экземпляра JIRA', verbose_name='Идентификатор для повторного открытия задачи'),
        ),
        migrations.AlterField(
            model_name='jira_instance',
            name='url',
            field=models.URLField(help_text='Для получения дополнительной информации о том, как настроить связку с Jira, обратитесь к документации DefectDojo.', max_length=2000, verbose_name='JIRA URL'),
        ),
        migrations.AlterField(
            model_name='jira_issue',
            name='jira_change',
            field=models.DateTimeField(help_text='Дата последнего изменения связанной задачи в Jira.', null=True, verbose_name='Дата последнего обновления в Jira'),
        ),
        migrations.AlterField(
            model_name='jira_issue',
            name='jira_creation',
            field=models.DateTimeField(help_text='Дата создания задачи в Jira по этой находке.', null=True, verbose_name='Дата создания задачи в Jira'),
        ),
        migrations.AlterField(
            model_name='jira_project',
            name='add_vulnerability_id_to_jira_label',
            field=models.BooleanField(default=False, verbose_name='Добавить идентификатор уязвимости в качестве заголовка JIRA'),
        ),
        migrations.AlterField(
            model_name='jira_project',
            name='custom_fields',
            field=models.JSONField(blank=True, help_text='Пользовательское поле в JIRA, представляющее собой сопоставление идентификаторов и значений в формате JSON, например {"customfield_10122": [{"name": "8.0.1"}]}', max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='jira_project',
            name='default_assignee',
            field=models.CharField(blank=True, help_text='Исполнитель по умолчанию в JIRA (имя). Если оставлено пустым, то используется значение по умолчанию, настроенное в JIRA.', max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='jira_project',
            name='issue_template_dir',
            field=models.CharField(blank=True, help_text='Выберите папку, содержащую шаблоны Django, используемые для отображения описания задач в JIRA. Они хранятся в dojo/templates/issue-trackers. Оставьте пустым, чтобы использовать шаблоны по умолчанию.', max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='jira_project',
            name='jira_instance',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='dojo.jira_instance', verbose_name='Экземпляр JIRA'),
        ),
        migrations.AlterField(
            model_name='jira_project',
            name='jira_labels',
            field=models.CharField(blank=True, help_text='Разделенные пробелом метки задач JIRA', max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='jira_project',
            name='product_jira_sla_notification',
            field=models.BooleanField(blank=True, default=False, verbose_name='Отправлять SLA уведомления в качестве комментария?'),
        ),
        migrations.AlterField(
            model_name='jira_project',
            name='push_all_issues',
            field=models.BooleanField(blank=True, default=False, help_text='Автоматически поддерживать паритет с JIRA. Всегда создавать и обновлять задачи JIRA для находок в этом Продукте.'),
        ),
        migrations.AlterField(
            model_name='jira_project',
            name='risk_acceptance_expiration_notification',
            field=models.BooleanField(blank=True, default=False, verbose_name='Отправлять оповещение об истечении срока принятия риска в качестве комментария?'),
        ),
        migrations.AlterField(
            model_name='language_type',
            name='color',
            field=models.CharField(blank=True, max_length=7, null=True, verbose_name='Цвет HTML'),
        ),
        migrations.AlterField(
            model_name='languages',
            name='blank',
            field=models.IntegerField(blank=True, null=True, verbose_name='Количество пустых строк'),
        ),
        migrations.AlterField(
            model_name='languages',
            name='code',
            field=models.IntegerField(blank=True, null=True, verbose_name='Количество строк кода'),
        ),
        migrations.AlterField(
            model_name='languages',
            name='comment',
            field=models.IntegerField(blank=True, null=True, verbose_name='Количество строк комментариев'),
        ),
        migrations.AlterField(
            model_name='languages',
            name='files',
            field=models.IntegerField(blank=True, null=True, verbose_name='Количество файлов'),
        ),
        migrations.AlterField(
            model_name='network_locations',
            name='location',
            field=models.CharField(help_text='Расположение сетевого тестирования: примеры: VPN, Интернет или Internal.', max_length=500),
        ),
        migrations.AlterField(
            model_name='notifications',
            name='jira_update',
            field=multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('slack', 'slack'), ('msteams', 'msteams'), ('mail', 'mail'), ('alert', 'alert')], default=('alert', 'alert'), help_text='Синхронизация JIRA происходит в фоновом режиме, ошибки будут показаны как уведомления/оповещения, так что не забудьте подписаться', max_length=24, verbose_name='Проблемы JIRA'),
        ),
        migrations.AlterField(
            model_name='notifications',
            name='risk_acceptance_expiration',
            field=multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('slack', 'slack'), ('msteams', 'msteams'), ('mail', 'mail'), ('alert', 'alert')], default=('alert', 'alert'), help_text='Получать уведомления о (грядущем) истечении срока приема риска', max_length=24, verbose_name='Принятие риска действует до'),
        ),
        migrations.AlterField(
            model_name='notifications',
            name='scan_added',
            field=multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('slack', 'slack'), ('msteams', 'msteams'), ('mail', 'mail'), ('alert', 'alert')], default=('alert', 'alert'), help_text='Срабатывает каждый раз, когда (ре)импорт выполняется создавая/изменяя/закрывая находки.', max_length=24),
        ),
        migrations.AlterField(
            model_name='notifications',
            name='sla_breach',
            field=multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('slack', 'slack'), ('msteams', 'msteams'), ('mail', 'mail'), ('alert', 'alert')], default=('alert', 'alert'), help_text='Получать уведомления о (грядущих) нарушениях SLA', max_length=24, verbose_name='Нарушение SLA'),
        ),
        migrations.AlterField(
            model_name='objects_product',
            name='artifact',
            field=models.CharField(blank=True, max_length=400, null=True, verbose_name='Артефакт'),
        ),
        migrations.AlterField(
            model_name='objects_product',
            name='folder',
            field=models.CharField(blank=True, max_length=400, null=True, verbose_name='Папка'),
        ),
        migrations.AlterField(
            model_name='objects_product',
            name='path',
            field=models.CharField(blank=True, max_length=600, null=True, verbose_name='Полный путь к файлу'),
        ),
        migrations.AlterField(
            model_name='objects_product',
            name='tags',
            field=tagulous.models.fields.TagField(_set_tag_meta=True, blank=True, force_lowercase=True, help_text='Добавьте теги, которые помогут описать этот объект. Выберите из списка или добавьте новые теги. Нажмите клавишу Enter для добавления.', to='dojo.tagulous_objects_product_tags'),
        ),
        migrations.AlterField(
            model_name='product',
            name='business_criticality',
            field=models.CharField(blank=True, choices=[('very high', 'Очень высокий'), ('high', 'Высокий'), ('medium', 'Средний'), ('low', 'Низкий'), ('very low', 'Очень низкий'), ('none', 'Нет')], max_length=9, null=True),
        ),
        migrations.AlterField(
            model_name='product',
            name='disable_sla_breach_notifications',
            field=models.BooleanField(default=False, help_text='Отключить уведомления о нарушениях SLA, если это указано в глобальных настройках', verbose_name='Отключить уведомления о нарушениях SLA'),
        ),
        migrations.AlterField(
            model_name='product',
            name='enable_full_risk_acceptance',
            field=models.BooleanField(default=True, help_text='Разрешает полное принятие риска используя форму принятия риска, дату истечения срока действия, загруженные доказательства и т. д.'),
        ),
        migrations.AlterField(
            model_name='product',
            name='enable_product_tag_inheritance',
            field=models.BooleanField(default=False, help_text='Включает наследование тегов в продукте. Любые теги, добавленные в продукт будут автоматически добавлены во все Проверки, Тесты и Находки', verbose_name='Включить наследование тегов продуктов'),
        ),
        migrations.AlterField(
            model_name='product',
            name='enable_simple_risk_acceptance',
            field=models.BooleanField(default=False, help_text='Позволяет принимать простые риски включением/отключением флажка.'),
        ),
        migrations.AlterField(
            model_name='product',
            name='external_audience',
            field=models.BooleanField(default=False, help_text='Укажите, используется ли приложение лицами, не входящими в организацию.'),
        ),
        migrations.AlterField(
            model_name='product',
            name='internet_accessible',
            field=models.BooleanField(default=False, help_text='Укажите, доступно ли приложение через интернет.'),
        ),
        migrations.AlterField(
            model_name='product',
            name='lifecycle',
            field=models.CharField(blank=True, choices=[('construction', 'В разработке'), ('production', 'На бою'), ('retirement', 'Выведено из эксплуатации')], max_length=12, null=True),
        ),
        migrations.AlterField(
            model_name='product',
            name='origin',
            field=models.CharField(blank=True, choices=[('third party library', 'Сторонняя библиотека'), ('purchased', 'Приобретено'), ('contractor', 'Разработано подрядчиком'), ('internal', 'Внутренняя разработка'), ('open source', 'Open Source'), ('outsourced', 'Аутсорсинг')], max_length=19, null=True),
        ),
        migrations.AlterField(
            model_name='product',
            name='platform',
            field=models.CharField(blank=True, choices=[('web service', 'API'), ('desktop', 'Настольный'), ('iot', 'Интернет вещей'), ('mobile', 'Мобильный'), ('web', 'Веб')], max_length=11, null=True),
        ),
        migrations.AlterField(
            model_name='product',
            name='revenue',
            field=models.DecimalField(blank=True, decimal_places=2, help_text='Оцените доход приложения.', max_digits=15, null=True),
        ),
        migrations.AlterField(
            model_name='product',
            name='tags',
            field=tagulous.models.fields.TagField(_set_tag_meta=True, blank=True, force_lowercase=True, help_text='Добавьте теги, которые помогут описать этот товар. Выберите из списка или добавьте новые теги. Нажмите клавишу Enter для добавления.', to='dojo.tagulous_product_tags'),
        ),
        migrations.AlterField(
            model_name='product',
            name='user_records',
            field=models.PositiveIntegerField(blank=True, help_text='Оцените количество записей пользователей в приложении.', null=True),
        ),
        migrations.AlterField(
            model_name='question',
            name='optional',
            field=models.BooleanField(default=False, help_text='Если выбрано, пользователь может не отвечать на этот вопрос'),
        ),
        migrations.AlterField(
            model_name='question',
            name='order',
            field=models.PositiveIntegerField(default=1, help_text='Порядок отображения'),
        ),
        migrations.AlterField(
            model_name='question',
            name='text',
            field=models.TextField(default='', help_text='Текст вопроса'),
        ),
        migrations.AlterField(
            model_name='regulation',
            name='acronym',
            field=models.CharField(help_text='Краткое представление названия.', max_length=20, unique=True),
        ),
        migrations.AlterField(
            model_name='regulation',
            name='category',
            field=models.CharField(choices=[('privacy', 'Личные данные'), ('finance', 'Финансы'), ('education', 'Образование'), ('medical', 'Медицина'), ('corporate', 'Корпоративный'), ('other', 'Прочие')], help_text='Предмет правила.', max_length=9),
        ),
        migrations.AlterField(
            model_name='regulation',
            name='description',
            field=models.TextField(blank=True, help_text='Информация о предназначении данного положения.'),
        ),
        migrations.AlterField(
            model_name='regulation',
            name='jurisdiction',
            field=models.CharField(help_text='Территория, на которой распространяется регулирование.', max_length=64),
        ),
        migrations.AlterField(
            model_name='regulation',
            name='name',
            field=models.CharField(help_text='Название правила.', max_length=128, unique=True),
        ),
        migrations.AlterField(
            model_name='regulation',
            name='reference',
            field=models.URLField(blank=True, help_text='Внешний URL для дополнительной информации.'),
        ),
        migrations.AlterField(
            model_name='risk_acceptance',
            name='accepted_by',
            field=models.CharField(blank=True, default=None, help_text='Лицо, принимающее риск, может быть вне DefectDojo.', max_length=200, null=True, verbose_name='Принят'),
        ),
        migrations.AlterField(
            model_name='risk_acceptance',
            name='decision',
            field=models.CharField(choices=[('A', 'Accept (The risk is acknowledged, yet remains)'), ('V', 'Avoid (Do not engage with whatever creates the risk)'), ('M', 'Mitigate (The risk still exists, yet compensating controls make it less of a threat)'), ('F', 'Fix (The risk is eradicated)'), ('T', 'Transfer (The risk is transferred to a 3rd party)')], default='A', help_text='Решение владельца риска об обращении с риском', max_length=2),
        ),
        migrations.AlterField(
            model_name='risk_acceptance',
            name='decision_details',
            field=models.TextField(blank=True, default=None, help_text='Если компенсирующие меры доступны для разрешения находки или снижения риска, то перечислите компенсирующие меры.', null=True),
        ),
        migrations.AlterField(
            model_name='risk_acceptance',
            name='expiration_date',
            field=models.DateTimeField(blank=True, default=None, help_text='По истечении срока принятия риска находка будет вновь активирована (если не отключено ниже).', null=True),
        ),
        migrations.AlterField(
            model_name='risk_acceptance',
            name='expiration_date_handled',
            field=models.DateTimeField(blank=True, default=None, help_text='(только для чтения) Когда было обработано истечение срока принятия риска (вручную или ежедневной задачей).', null=True),
        ),
        migrations.AlterField(
            model_name='risk_acceptance',
            name='expiration_date_warned',
            field=models.DateTimeField(blank=True, default=None, help_text='(только для чтения) Дата отправки оповещения об истечении срока принятия риска.', null=True),
        ),
        migrations.AlterField(
            model_name='risk_acceptance',
            name='name',
            field=models.CharField(help_text='Описательное название, которое, возможно, будет использоваться в будущем для объединения в группы принятых рисков во всех проверках и продуктах', max_length=300),
        ),
        migrations.AlterField(
            model_name='risk_acceptance',
            name='owner',
            field=models.ForeignKey(help_text='Пользователь DefectDojo принявший риск. В дальнейшем только этот пользователь и администраторы могут редактировать эту информацию.', on_delete=django.db.models.deletion.RESTRICT, to='dojo.dojo_user'),
        ),
        migrations.AlterField(
            model_name='risk_acceptance',
            name='path',
            field=models.FileField(blank=True, null=True, upload_to='risk/%Y/%m/%d', verbose_name='Доказательство'),
        ),
        migrations.AlterField(
            model_name='risk_acceptance',
            name='reactivate_expired',
            field=models.BooleanField(default=True, help_text='Активировать находку по истечении срока принятия риска?', verbose_name='Активировать находку по истечении срока принятия риска'),
        ),
        migrations.AlterField(
            model_name='risk_acceptance',
            name='recommendation',
            field=models.CharField(choices=[('A', 'Accept (The risk is acknowledged, yet remains)'), ('V', 'Avoid (Do not engage with whatever creates the risk)'), ('M', 'Mitigate (The risk still exists, yet compensating controls make it less of a threat)'), ('F', 'Fix (The risk is eradicated)'), ('T', 'Transfer (The risk is transferred to a 3rd party)')], default='F', help_text='Рекомендация от команды безопасности.', max_length=2, verbose_name='Рекомендации по безопасности'),
        ),
        migrations.AlterField(
            model_name='risk_acceptance',
            name='recommendation_details',
            field=models.TextField(blank=True, help_text='Пояснение рекомендаций по обеспечению безопасности', null=True, verbose_name='Детали рекомендаций по безопасности'),
        ),
        migrations.AlterField(
            model_name='risk_acceptance',
            name='restart_sla_expired',
            field=models.BooleanField(default=False, help_text='Если включено, SLA для находки перезапустится по истечении срока принятия риска.', verbose_name='Перезапустить SLA по истечении срока принятия риска'),
        ),
        migrations.AlterField(
            model_name='sla_configuration',
            name='critical',
            field=models.IntegerField(default=7, help_text='количество дней на исправление критической находки.', verbose_name='SLA дней на исправление критической находки '),
        ),
        migrations.AlterField(
            model_name='sla_configuration',
            name='high',
            field=models.IntegerField(default=30, help_text='количество дней на исправление находки высокой важности.', verbose_name='SLA дней на исправление находки высокой важности'),
        ),
        migrations.AlterField(
            model_name='sla_configuration',
            name='low',
            field=models.IntegerField(default=120, help_text='количество дней на исправление находки низкой важности.', verbose_name='SLA дней на исправление находки низкой важности'),
        ),
        migrations.AlterField(
            model_name='sla_configuration',
            name='medium',
            field=models.IntegerField(default=90, help_text='количество дней на исправление находки средней важности.', verbose_name='SLA дней на исправление находки средней важности'),
        ),
        migrations.AlterField(
            model_name='sla_configuration',
            name='name',
            field=models.CharField(help_text='Уникальное название для набора SLA.', max_length=128, unique=True, verbose_name='Название пользовательского SLA'),
        ),
        migrations.AlterField(
            model_name='sonarqube_issue',
            name='key',
            field=models.CharField(help_text='Ключ задачи SonarQube', max_length=30, unique=True),
        ),
        migrations.AlterField(
            model_name='sonarqube_issue',
            name='status',
            field=models.CharField(help_text='Статус задачи SonarQube', max_length=20),
        ),
        migrations.AlterField(
            model_name='sonarqube_issue',
            name='type',
            field=models.CharField(help_text='Тип проблемы SonarQube', max_length=20),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='add_vulnerability_id_to_jira_label',
            field=models.BooleanField(default=False, verbose_name='Добавить идентификатор уязвимости в качестве заголовка JIRA'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='allow_anonymous_survey_repsonse',
            field=models.BooleanField(default=False, help_text='Разрешить любому, кто имеет ссылку на опросник, ответить на вопрос', verbose_name='Разрешить анонимные ответы на опросник'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='default_group',
            field=models.ForeignKey(blank=True, help_text='Новые пользователи будут назначены в эту группу.', null=True, on_delete=django.db.models.deletion.RESTRICT, to='dojo.dojo_group'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='default_group_email_pattern',
            field=models.CharField(blank=True, default='', help_text='Новые пользователи будут назначены в группу по умолчанию только в том случает, если их email соответствует этому шаблону. Это необязательное условие.', max_length=200),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='default_group_role',
            field=models.ForeignKey(blank=True, help_text='Новые пользователи будут назначены в их группу по умолчанию с этой ролью.', null=True, on_delete=django.db.models.deletion.RESTRICT, to='dojo.role'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='delete_duplicates',
            field=models.BooleanField(default=False, help_text='Требуется указать параметр: максимальное количество хранимых дубликатов.'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='disable_jira_webhook_secret',
            field=models.BooleanField(default=False, help_text='Разрешает входящие запросы без использования секретного ключа (не рекомендуемое поведение)', verbose_name='Отключить секретный ключ для веб хука'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='disclaimer',
            field=models.TextField(blank=True, default='', help_text='Включить этот пользовательский отказ от ответственности во все оповещения и сгенерированные отчеты', max_length=3000, verbose_name='Пользовательский отказ от ответственности'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='enable_benchmark',
            field=models.BooleanField(default=True, help_text='Включает бенчмарки, такие как OWASP ASVS', verbose_name='Включить бенчмарки'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='enable_calendar',
            field=models.BooleanField(default=True, help_text='Если эта настройка выключена, календарь будет отключен в пользовательском интерфейсе.', verbose_name='Включить календарь'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='enable_checklists',
            field=models.BooleanField(default=True, help_text='Если этот параметр выключен, чек-листы будут отключены в пользовательском интерфейсе.', verbose_name='Включить чеклист'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='enable_credentials',
            field=models.BooleanField(default=True, help_text='Если эта настройка выключена, то учетные данные будут отключены в пользовательском интерфейсе.', verbose_name='Включить учетные данные'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='enable_deduplication',
            field=models.BooleanField(default=False, help_text='With this setting turned on, DefectDojo deduplicates findings by comparing endpoints, cwe fields, and titles. If two findings share a URL and have the same CWE or title, DefectDojo marks the recent finding as a duplicate. When deduplication is enabled, a list of deduplicated findings is added to the engagement view.', verbose_name='Дедупликация уязвимостей'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='enable_endpoint_metadata_import',
            field=models.BooleanField(default=True, help_text='Если эта настройка выключена, импорт метаданных конечных точек будет отключен в пользовательском интерфейсе.', verbose_name='Включить импорт метаданных конечной точки'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='enable_finding_groups',
            field=models.BooleanField(default=True, help_text='Если эта настройка выключена, группы Находок будут отключены.', verbose_name='Включить группы Находок'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='enable_finding_sla',
            field=models.BooleanField(default=True, help_text='Включение SLA Находки на время исправления.', verbose_name='Включить SLA для уязвимостей'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='enable_github',
            field=models.BooleanField(default=False, verbose_name='Включить интеграцию с GitHub'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='enable_jira',
            field=models.BooleanField(default=False, verbose_name='Включить интеграцию с JIRA'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='enable_jira_web_hook',
            field=models.BooleanField(default=False, help_text='Пожалуйста, обратите внимание: настоятельно рекомендуется использовать секретный ключ ниже и / или белый список IP серверов JIRA с использованием прокси-сервера, например Nginx.', verbose_name='Включить веб-хук JIRA'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='enable_msteams_notifications',
            field=models.BooleanField(default=False, verbose_name='Включить уведомления в Microsoft Teams'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='enable_notify_sla_active',
            field=models.BooleanField(default=False, help_text='Включение оповещения, когда нарушено время на исправление SLA Находки для активных Находок.', verbose_name='Включить оповещения о нарушении SLA для активных Находок'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='enable_notify_sla_active_verified',
            field=models.BooleanField(default=False, help_text='Включение оповещения, когда наступило время на исправление нарушения SLA Находки для активных и подтвержденных Находок.', verbose_name='Включить оповещение о нарушении SLA для активных и подтвержденных Находок'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='enable_notify_sla_exponential_backoff',
            field=models.BooleanField(default=False, help_text='Включить экспоненциальную стратегию отсрочки для оповещений о нарушении SLA (например 1, 2, 4, 8 и т.д.). В противном случае оповещение будет приходить каждый день', verbose_name='Включить экспоненциальную стратегию отсрочки для оповещений о нарушении SLA.'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='enable_notify_sla_jira_only',
            field=models.BooleanField(default=False, help_text='Включение оповещения, когда наступило время на исправление нарушения SLA Находки, которая связана с задачей в JIRA. Оповещение отключено для Находок не связанных с задачами в JIRA', verbose_name='Включить оповещение о нарушении SLA только для Находок связанных с JIRA'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='enable_product_grade',
            field=models.BooleanField(default=False, help_text='Отображает буквы оценки рядом с продуктом, показывающие общий уровень защищенности.', verbose_name='Включить оценку продукта'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='enable_product_tag_inheritance',
            field=models.BooleanField(default=False, help_text='Включение наследование тегов продуктами глобально для всех продуктов. Любые теги, добавленные в продукт будут автоматически добавлены во все Проверки, Тесты и Находки', verbose_name='Включить наследование тегов продуктов'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='enable_product_tracking_files',
            field=models.BooleanField(default=True, help_text='Если эта настройка выключена, файлы отслеживания продукта будут отключены в пользовательском интерфейсе.', verbose_name='Включить отслеживание файлов в продукте'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='enable_questionnaires',
            field=models.BooleanField(default=True, help_text='Если этот параметр выключен, опросники будут отключены в пользовательском интерфейсе.', verbose_name='Включить опросники'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='enable_slack_notifications',
            field=models.BooleanField(default=False, verbose_name='Включить уведомления Slack'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='enable_template_match',
            field=models.BooleanField(default=False, help_text='Позволяет использовать глобальные советы по восстановлению и сопоставление по CWE и названию. Текст будет заменен для "Митигирования", "Импакта", и ссылок на недостаток. Полезно для обеспечения консистентного значения поля "Импакт" и "Совета по исправлению", независимо от сканера.', verbose_name='Включить консультации по исправлению'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='enable_user_profile_editable',
            field=models.BooleanField(default=True, help_text='Если включено, то пользователи могут редактировать свои профили', verbose_name='Включить изменение профиля пользователя'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='engagement_auto_close',
            field=models.BooleanField(default=False, help_text='Закрывает Проверку через 3 дня (по умолчанию) после истечения срока, включая последнее обновление.', verbose_name='Включить автоматическое закрытие Проверок'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='engagement_auto_close_days',
            field=models.IntegerField(default=3, help_text='Закрытие проверки по прошествии указанного числа дней с момента истечения срока, включая последнее обновление.', verbose_name='Дней до автоматического закрытия Проверки'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='false_positive_history',
            field=models.BooleanField(default=False, help_text='(ЭКСПЕРИМЕНТАЛЬНО) DefectDojo будет автоматически помечать находки как false positive, если аналогичная находка (на основе алгоритма дедупликации) была ранее помечена как false positive в том же продукте. ВНИМАНИЕ: Хотя алгоритм дедупликации используется для пометки находки как false positive, эта функция не будет работать, если дедупликация включена, поскольку использовать обе функции одновременно не имеет смысла.'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='jira_labels',
            field=models.CharField(blank=True, help_text='Разделенные пробелом метки задач JIRA', max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='jira_webhook_secret',
            field=models.CharField(help_text='Секретный ключ, необходимый в URL для входящего JIRA Webhook', max_length=64, null=True, verbose_name='JIRA Webhook URL'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='lowercase_character_required',
            field=models.BooleanField(default=True, help_text='Требует, чтобы пароли пользователей содержали как минимум одну строчную букву (a-z).', verbose_name='Пароль должен содержать одну строчную букву'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='max_dupes',
            field=models.IntegerField(blank=True, default=10, help_text='Когда включено, если задача достигает максимального количества дубликатов, то самые старые будут удаляться. Дубликаты не будут удаляться, если оставить значение пустым. При значении "0" будут удаляться все дубликаты.', null=True, verbose_name='Макс. дубликатов'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='maximum_password_length',
            field=models.IntegerField(default=48, help_text='Требует от пользователя установки паролей меньше максимальной длины.', verbose_name='Максимальная длина пароля'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='minimum_password_length',
            field=models.IntegerField(default=9, help_text='Требует от пользователя задания паролей больше минимальной длины.', verbose_name='Минимальная длина пароля'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='msteams_url',
            field=models.CharField(blank=True, default='', help_text='Полный URL-адрес входящего веб хука', max_length=400),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='non_common_password_required',
            field=models.BooleanField(default=True, help_text='Требует, чтобы пароли пользователей не входили в список типичных паролей.', verbose_name='Пароль не должен быть типичным'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='number_character_required',
            field=models.BooleanField(default=True, help_text='Требует, чтобы пароли пользователей содержали как минимум одну цифру (0-9).', verbose_name='Пароль должен содержать одну цифру'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='product_grade_a',
            field=models.IntegerField(default=90, help_text="Процент баллов для 'A' >=", verbose_name='Оценка A'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='product_grade_b',
            field=models.IntegerField(default=80, help_text="Процент балла для 'B' >=", verbose_name='Оценка Б'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='product_grade_c',
            field=models.IntegerField(default=70, help_text="Процент баллов для 'C' >=", verbose_name='Оценка С'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='product_grade_d',
            field=models.IntegerField(default=60, help_text="Процент баллов для 'D' >=", verbose_name='Оценка D'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='product_grade_f',
            field=models.IntegerField(default=59, help_text="Процент баллов для 'F' <=", verbose_name='Оценка F'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='retroactive_false_positive_history',
            field=models.BooleanField(default=False, help_text='(ЭКПЕРИМЕНТАЛЬНО) FP History также будет задним числом ставить/снимать отметку false positive со всех существующих сопоставимых находок в продукте. Работает только в том случае, если функция False Positive History включена.'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='risk_acceptance_form_default_days',
            field=models.IntegerField(blank=True, default=180, help_text='Срок действия по умолчанию для формы принятия рисков.', null=True),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='risk_acceptance_notify_before_expiration',
            field=models.IntegerField(blank=True, default=10, help_text='Уведомлять X дней до истечения срока действия риска. Оставьте пустым, чтобы отключить.', null=True, verbose_name='Количество дней до истечения срока принятия риска'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='slack_channel',
            field=models.CharField(blank=True, default='', help_text='Необязательно. Требуется, если вы хотите отправлять глобальные уведомления.', max_length=100),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='slack_token',
            field=models.CharField(blank=True, default='', help_text='Токен необходим для взаимодействия со Slack. Получите его на https://api.slack.com/tokens', max_length=100),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='slack_username',
            field=models.CharField(blank=True, default='', help_text='Необязательно. В противном случае будет использоваться имя вашего бота.', max_length=100),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='special_character_required',
            field=models.BooleanField(default=True, help_text='Требует, чтобы пароли пользователей содержали как минимум один специальный символ (()[]{}|\\`~!@#$%^&*_-+=;:\'",<>./?).', verbose_name='Пароль должен содержать один специальный символ'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='uppercase_character_required',
            field=models.BooleanField(default=True, help_text='Требует, чтобы пароли пользователей содержали как минимум одну заглавную букву (A-Z).', verbose_name='Пароль должен содержать одну заглавную букву'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='url_prefix',
            field=models.CharField(blank=True, default='', help_text='Префикс URL, если DefectDojo установлен в свой виртуальный подкаталог.', max_length=300),
        ),
        migrations.AlterField(
            model_name='test',
            name='api_scan_configuration',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dojo.product_api_scan_configuration', verbose_name='Настройка сканирования API'),
        ),
        migrations.AlterField(
            model_name='test',
            name='branch_tag',
            field=models.CharField(blank=True, help_text='Проверенный тег или ветка, реимпорт может изменить это поле.', max_length=150, null=True, verbose_name='Ветка/Тег'),
        ),
        migrations.AlterField(
            model_name='test',
            name='build_id',
            field=models.CharField(blank=True, help_text='ID сборки, который был протестирован, реимпорт может обновить это поле.', max_length=150, null=True, verbose_name='ID сборки'),
        ),
        migrations.AlterField(
            model_name='test',
            name='commit_hash',
            field=models.CharField(blank=True, help_text='Хэш протестированного коммита, реимпорт может изменить это поле.', max_length=150, null=True, verbose_name='Хэш коммита'),
        ),
        migrations.AlterField(
            model_name='test',
            name='inherited_tags',
            field=tagulous.models.fields.TagField(_set_tag_meta=True, blank=True, force_lowercase=True, help_text='Внутреннее использование специфичных тегов для поддержания паритетности продукта. Это поле будет присутствовать как подмножество в поле тегов', to='dojo.tagulous_test_inherited_tags'),
        ),
        migrations.AlterField(
            model_name='test',
            name='tags',
            field=tagulous.models.fields.TagField(_set_tag_meta=True, blank=True, force_lowercase=True, help_text='Добавьте теги, которые помогут описать этот тест. Выберите из списка или добавьте новые теги. Нажмите клавишу Enter для добавления.', to='dojo.tagulous_test_tags'),
        ),
        migrations.AlterField(
            model_name='test_import',
            name='branch_tag',
            field=models.CharField(blank=True, help_text='Проверенный тег или ветка, реимпорт может изменить это поле.', max_length=150, null=True, verbose_name='Ветка/Тег'),
        ),
        migrations.AlterField(
            model_name='test_import',
            name='build_id',
            field=models.CharField(blank=True, help_text='ID сборки, который был протестирован, реимпорт может обновить это поле.', max_length=150, null=True, verbose_name='ID сборки'),
        ),
        migrations.AlterField(
            model_name='test_import',
            name='commit_hash',
            field=models.CharField(blank=True, help_text='Хэш протестированного коммита, реимпорт может изменить это поле.', max_length=150, null=True, verbose_name='Хэш коммита'),
        ),
        migrations.AlterField(
            model_name='testing_guide',
            name='how_to_test',
            field=models.TextField(default=None, help_text='Как протестировать цель'),
        ),
        migrations.AlterField(
            model_name='testing_guide',
            name='identifier',
            field=models.CharField(blank=True, help_text='Тест уникального идентификатора', max_length=20, null=True),
        ),
        migrations.AlterField(
            model_name='testing_guide',
            name='name',
            field=models.CharField(help_text='Название теста', max_length=400),
        ),
        migrations.AlterField(
            model_name='testing_guide',
            name='objective',
            field=models.CharField(help_text='Цель теста', max_length=800),
        ),
        migrations.AlterField(
            model_name='testing_guide',
            name='results_expected',
            field=models.CharField(help_text='Какие ожидаются результаты теста', max_length=800),
        ),
        migrations.AlterField(
            model_name='testing_guide',
            name='summary',
            field=models.CharField(help_text='Описание теста', max_length=800),
        ),
        migrations.AlterField(
            model_name='textanswer',
            name='answer',
            field=models.TextField(default='', help_text='Текст ответа'),
        ),
        migrations.AlterField(
            model_name='tool_configuration',
            name='api_key',
            field=models.CharField(blank=True, max_length=600, null=True, verbose_name='Ключ API'),
        ),
        migrations.AlterField(
            model_name='tool_configuration',
            name='auth_title',
            field=models.CharField(blank=True, max_length=200, null=True, verbose_name='Название для SSH/API ключа'),
        ),
        migrations.AlterField(
            model_name='tool_configuration',
            name='extras',
            field=models.CharField(blank=True, help_text='Дополнительные параметры, которые будут использованы сканером', max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='tool_product_history',
            name='succesfull',
            field=models.BooleanField(default=True, verbose_name='Успешно'),
        ),
        migrations.AlterField(
            model_name='usercontactinfo',
            name='block_execution',
            field=models.BooleanField(default=False, help_text='Вместо асинхронной дедупликации уязвимостей, дедупликация будет проходить синхронно и "блокировать" пользователя до завершения.'),
        ),
        migrations.AlterField(
            model_name='usercontactinfo',
            name='cell_number',
            field=models.CharField(blank=True, help_text="Номер телефона должен быть введен в формате: '+9999999'. Допускается до 15 цифр.", max_length=15, validators=[django.core.validators.RegexValidator(message="Номер телефона должен быть введен в формате: '+9999999'. Допускается до 15 цифр.", regex='^\\+?1?\\d{9,15}$')]),
        ),
        migrations.AlterField(
            model_name='usercontactinfo',
            name='force_password_reset',
            field=models.BooleanField(default=False, help_text='Принудительно сбросить пароль этого пользователя при следующем входе в систему.'),
        ),
        migrations.AlterField(
            model_name='usercontactinfo',
            name='phone_number',
            field=models.CharField(blank=True, help_text="Номер телефона должен быть введен в формате: '+9999999'. Допускается до 15 цифр.", max_length=15, validators=[django.core.validators.RegexValidator(message="Номер телефона должен быть введен в формате: '+9999999'. Допускается до 15 цифр.", regex='^\\+?1?\\d{9,15}$')]),
        ),
        migrations.AlterField(
            model_name='usercontactinfo',
            name='slack_username',
            field=models.CharField(blank=True, help_text='Адрес электронной почты, связанный с вашим аккаунтом Slack', max_length=150, null=True, verbose_name='Адрес электронной почты Slack'),
        ),
    ]
